###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        03/Dec/2019  20:49:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Documents\prj\STM32VCP\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
#    Command line =  
#        C:\Users\Administrator\Documents\prj\STM32VCP\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lcN
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\STM322xG-EVAL_USBD-HS\List\
#        -o
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\STM322xG-EVAL_USBD-HS\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Full.h"
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\inc\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\STM322xG-EVAL_USBD-HS\List\usbd_ioreq.lst
#    Object file  =  
#        C:\Users\Administrator\Documents\prj\STM32VCP\Project\USB_Device_Examples\VCP\EWARM\STM322xG-EVAL_USBD-HS\Obj\usbd_ioreq.o
#
###############################################################################

C:\Users\Administrator\Documents\prj\STM32VCP\Libraries\STM32_USB_Device_Library\Core\src\usbd_ioreq.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_ioreq.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    19-March-2012
      7            * @brief   This file provides the IO requests APIs for control endpoints.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbd_ioreq.h"
     30          
     31          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     32            * @{
     33            */
     34          
     35          
     36          /** @defgroup USBD_IOREQ 
     37            * @brief control I/O requests module
     38            * @{
     39            */ 
     40          
     41          /** @defgroup USBD_IOREQ_Private_TypesDefinitions
     42            * @{
     43            */ 
     44          /**
     45            * @}
     46            */ 
     47          
     48          
     49          /** @defgroup USBD_IOREQ_Private_Defines
     50            * @{
     51            */ 
     52          
     53          /**
     54            * @}
     55            */ 
     56          
     57          
     58          /** @defgroup USBD_IOREQ_Private_Macros
     59            * @{
     60            */ 
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup USBD_IOREQ_Private_Variables
     67            * @{
     68            */ 
     69          
     70          /**
     71            * @}
     72            */ 
     73          
     74          
     75          /** @defgroup USBD_IOREQ_Private_FunctionPrototypes
     76            * @{
     77            */ 
     78          /**
     79            * @}
     80            */ 
     81          
     82          
     83          /** @defgroup USBD_IOREQ_Private_Functions
     84            * @{
     85            */ 
     86          
     87          /**
     88          * @brief  USBD_CtlSendData
     89          *         send data on the ctl pipe
     90          * @param  pdev: device instance
     91          * @param  buff: pointer to data buffer
     92          * @param  len: length of data to be sent
     93          * @retval status
     94          */
     95          USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
     96                                         uint8_t *pbuf,
     97                                         uint16_t len)
     98          {
     99            USBD_Status ret = USBD_OK;
    100            
    101            pdev->dev.in_ep[0].total_data_len = len;
    102            pdev->dev.in_ep[0].rem_data_len   = len;
    103            pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
    104          
    105            DCD_EP_Tx (pdev, 0, pbuf, len);
    106           
    107            return ret;
    108          }
    109          
    110          /**
    111          * @brief  USBD_CtlContinueSendData
    112          *         continue sending data on the ctl pipe
    113          * @param  pdev: device instance
    114          * @param  buff: pointer to data buffer
    115          * @param  len: length of data to be sent
    116          * @retval status
    117          */
    118          USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
    119                                                 uint8_t *pbuf,
    120                                                 uint16_t len)
    121          {
    122            USBD_Status ret = USBD_OK;
    123            
    124            DCD_EP_Tx (pdev, 0, pbuf, len);
    125            
    126            
    127            return ret;
    128          }
    129          
    130          /**
    131          * @brief  USBD_CtlPrepareRx
    132          *         receive data on the ctl pipe
    133          * @param  pdev: USB OTG device instance
    134          * @param  buff: pointer to data buffer
    135          * @param  len: length of data to be received
    136          * @retval status
    137          */
    138          USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
    139                                            uint8_t *pbuf,                                  
    140                                            uint16_t len)
    141          {
    142            USBD_Status ret = USBD_OK;
    143            
    144            pdev->dev.out_ep[0].total_data_len = len;
    145            pdev->dev.out_ep[0].rem_data_len   = len;
    146            pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
    147            
    148            DCD_EP_PrepareRx (pdev,
    149                              0,
    150                              pbuf,
    151                              len);
    152            
    153          
    154            return ret;
    155          }
    156          
    157          /**
    158          * @brief  USBD_CtlContinueRx
    159          *         continue receive data on the ctl pipe
    160          * @param  pdev: USB OTG device instance
    161          * @param  buff: pointer to data buffer
    162          * @param  len: length of data to be received
    163          * @retval status
    164          */
    165          USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
    166                                                    uint8_t *pbuf,                                          
    167                                                    uint16_t len)
    168          {
    169            USBD_Status ret = USBD_OK;
    170            
    171            DCD_EP_PrepareRx (pdev,
    172                              0,                     
    173                              pbuf,                         
    174                              len);
    175            return ret;
    176          }
    177          /**
    178          * @brief  USBD_CtlSendStatus
    179          *         send zero lzngth packet on the ctl pipe
    180          * @param  pdev: USB OTG device instance
    181          * @retval status
    182          */
    183          USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
    184          {
    185            USBD_Status ret = USBD_OK;
    186            pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
    187            DCD_EP_Tx (pdev,
    188                       0,
    189                       NULL, 
    190                       0); 
    191            
    192            USB_OTG_EP0_OutStart(pdev);  
    193            
    194            return ret;
    195          }
    196          
    197          /**
    198          * @brief  USBD_CtlReceiveStatus
    199          *         receive zero lzngth packet on the ctl pipe
    200          * @param  pdev: USB OTG device instance
    201          * @retval status
    202          */
    203          USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
    204          {
    205            USBD_Status ret = USBD_OK;
    206            pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
    207            DCD_EP_PrepareRx ( pdev,
    208                              0,
    209                              NULL,
    210                              0);  
    211          
    212            USB_OTG_EP0_OutStart(pdev);
    213            
    214            return ret;
    215          }
    216          
    217          
    218          /**
    219          * @brief  USBD_GetRxCount
    220          *         returns the received data length
    221          * @param  pdev: USB OTG device instance
    222          *         epnum: endpoint index
    223          * @retval Rx Data blength
    224          */
    225          uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
    226          {
    227            return pdev->dev.out_ep[epnum].xfer_count;
    228          }
    229          
    230          /**
    231            * @}
    232            */ 
    233          
    234          
    235          /**
    236            * @}
    237            */ 
    238          
    239          
    240          /**
    241            * @}
    242            */ 
    243          
    244          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   USBD_CtlContinueRx
        24   -> DCD_EP_PrepareRx
      24   USBD_CtlContinueSendData
        24   -> DCD_EP_Tx
      24   USBD_CtlPrepareRx
        24   -> DCD_EP_PrepareRx
      16   USBD_CtlReceiveStatus
        16   -> DCD_EP_PrepareRx
        16   -> USB_OTG_EP0_OutStart
      24   USBD_CtlSendData
        24   -> DCD_EP_Tx
      16   USBD_CtlSendStatus
        16   -> DCD_EP_Tx
        16   -> USB_OTG_EP0_OutStart
       0   USBD_GetRxCount


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  USBD_CtlContinueRx
      30  USBD_CtlContinueSendData
      48  USBD_CtlPrepareRx
      36  USBD_CtlReceiveStatus
      48  USBD_CtlSendData
      36  USBD_CtlSendStatus
      16  USBD_GetRxCount

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
